// **********************************************************************
// Parsed By TarsParser(2.0.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "MonitorQuery.tars" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var tars = tars || {};
module.exports.tars = tars;

tars.MonitorQueryProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

tars.MonitorQueryProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.MonitorQueryProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


tars.OP = {
    "EQ" : 0,
    "GT" : 1,
    "GTE" : 2,
    "LT" : 3,
    "LTE" : 4,
    "LIKE" : 5,
    "_classname" : "tars.OP"
};
tars.OP._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.OP._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.Condition = function() {
    this.field = "";
    this.op = tars.OP.EQ;
    this.val = "";
    this._classname = "tars.Condition";
};
tars.Condition._classname = "tars.Condition";
tars.Condition._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.Condition._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.Condition._readFrom = function (is) {
    var tmp = new tars.Condition();
    tmp.field = is.readString(0, true, "");
    tmp.op = is.readInt32(1, true, tars.OP.EQ);
    tmp.val = is.readString(2, true, "");
    return tmp;
};
tars.Condition.prototype._writeTo = function (os) {
    os.writeString(0, this.field);
    os.writeInt32(1, this.op);
    os.writeString(2, this.val);
};
tars.Condition.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.Condition.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.Condition.prototype.toObject = function() { 
    return {
        "field" : this.field,
        "op" : this.op,
        "val" : this.val
    };
};
tars.Condition.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("field") && (this.field = json.field);
    json.hasOwnProperty("op") && (this.op = json.op);
    json.hasOwnProperty("val") && (this.val = json.val);
};
tars.Condition.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.Condition.new = function () {
    return new tars.Condition();
};
tars.Condition.create = function (is) {
    return tars.Condition._readFrom(is);
};

tars.MonitorQueryReq = function() {
    this.uid = "";
    this.method = "query";
    this.dataid = "";
    this.date = "";
    this.tflag1 = "";
    this.tflag2 = "";
    this.conditions = new TarsStream.List(tars.Condition);
    this.indexs = new TarsStream.List(TarsStream.String);
    this.groupby = new TarsStream.List(TarsStream.String);
    this._classname = "tars.MonitorQueryReq";
};
tars.MonitorQueryReq._classname = "tars.MonitorQueryReq";
tars.MonitorQueryReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.MonitorQueryReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.MonitorQueryReq._readFrom = function (is) {
    var tmp = new tars.MonitorQueryReq();
    tmp.uid = is.readString(0, true, "");
    tmp.method = is.readString(1, true, "query");
    tmp.dataid = is.readString(2, true, "");
    tmp.date = is.readString(3, true, "");
    tmp.tflag1 = is.readString(4, true, "");
    tmp.tflag2 = is.readString(5, true, "");
    tmp.conditions = is.readList(6, true, TarsStream.List(tars.Condition));
    tmp.indexs = is.readList(7, true, TarsStream.List(TarsStream.String));
    tmp.groupby = is.readList(8, true, TarsStream.List(TarsStream.String));
    return tmp;
};
tars.MonitorQueryReq.prototype._writeTo = function (os) {
    os.writeString(0, this.uid);
    os.writeString(1, this.method);
    os.writeString(2, this.dataid);
    os.writeString(3, this.date);
    os.writeString(4, this.tflag1);
    os.writeString(5, this.tflag2);
    os.writeList(6, this.conditions);
    os.writeList(7, this.indexs);
    os.writeList(8, this.groupby);
};
tars.MonitorQueryReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.MonitorQueryReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.MonitorQueryReq.prototype.toObject = function() { 
    return {
        "uid" : this.uid,
        "method" : this.method,
        "dataid" : this.dataid,
        "date" : this.date,
        "tflag1" : this.tflag1,
        "tflag2" : this.tflag2,
        "conditions" : this.conditions.toObject(),
        "indexs" : this.indexs.toObject(),
        "groupby" : this.groupby.toObject()
    };
};
tars.MonitorQueryReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("uid") && (this.uid = json.uid);
    json.hasOwnProperty("method") && (this.method = json.method);
    json.hasOwnProperty("dataid") && (this.dataid = json.dataid);
    json.hasOwnProperty("date") && (this.date = json.date);
    json.hasOwnProperty("tflag1") && (this.tflag1 = json.tflag1);
    json.hasOwnProperty("tflag2") && (this.tflag2 = json.tflag2);
    json.hasOwnProperty("conditions") && (this.conditions.readFromObject(json.conditions));
    json.hasOwnProperty("indexs") && (this.indexs.readFromObject(json.indexs));
    json.hasOwnProperty("groupby") && (this.groupby.readFromObject(json.groupby));
};
tars.MonitorQueryReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.MonitorQueryReq.new = function () {
    return new tars.MonitorQueryReq();
};
tars.MonitorQueryReq.create = function (is) {
    return tars.MonitorQueryReq._readFrom(is);
};

tars.MonitorQueryRsp = function() {
    this.ret = 0;
    this.msg = "";
    this.lastTime = "";
    this.activeDb = 0;
    this.totalDb = 0;
    this.retThreads = new TarsStream.List(TarsStream.Int32);
    this.result = new TarsStream.Map(TarsStream.String, TarsStream.List(TarsStream.Double));
    this._classname = "tars.MonitorQueryRsp";
};
tars.MonitorQueryRsp._classname = "tars.MonitorQueryRsp";
tars.MonitorQueryRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.MonitorQueryRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.MonitorQueryRsp._readFrom = function (is) {
    var tmp = new tars.MonitorQueryRsp();
    tmp.ret = is.readInt32(0, true, 0);
    tmp.msg = is.readString(1, false, "");
    tmp.lastTime = is.readString(2, true, "");
    tmp.activeDb = is.readInt32(3, true, 0);
    tmp.totalDb = is.readInt32(4, true, 0);
    tmp.retThreads = is.readList(5, true, TarsStream.List(TarsStream.Int32));
    tmp.result = is.readMap(6, false, TarsStream.Map(TarsStream.String, TarsStream.List(TarsStream.Double)));
    return tmp;
};
tars.MonitorQueryRsp.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ret);
    os.writeString(1, this.msg);
    os.writeString(2, this.lastTime);
    os.writeInt32(3, this.activeDb);
    os.writeInt32(4, this.totalDb);
    os.writeList(5, this.retThreads);
    os.writeMap(6, this.result);
};
tars.MonitorQueryRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.MonitorQueryRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.MonitorQueryRsp.prototype.toObject = function() { 
    return {
        "ret" : this.ret,
        "msg" : this.msg,
        "lastTime" : this.lastTime,
        "activeDb" : this.activeDb,
        "totalDb" : this.totalDb,
        "retThreads" : this.retThreads.toObject(),
        "result" : this.result.toObject()
    };
};
tars.MonitorQueryRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("ret") && (this.ret = json.ret);
    json.hasOwnProperty("msg") && (this.msg = json.msg);
    json.hasOwnProperty("lastTime") && (this.lastTime = json.lastTime);
    json.hasOwnProperty("activeDb") && (this.activeDb = json.activeDb);
    json.hasOwnProperty("totalDb") && (this.totalDb = json.totalDb);
    json.hasOwnProperty("retThreads") && (this.retThreads.readFromObject(json.retThreads));
    json.hasOwnProperty("result") && (this.result.readFromObject(json.result));
};
tars.MonitorQueryRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.MonitorQueryRsp.new = function () {
    return new tars.MonitorQueryRsp();
};
tars.MonitorQueryRsp.create = function (is) {
    return tars.MonitorQueryRsp._readFrom(is);
};


var __tars_MonitorQuery$query$EN = function (req) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, req);
    return os.getBinBuffer();
};

var __tars_MonitorQuery$query$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "rsp" : is.readStruct(2, true, tars.MonitorQueryRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_MonitorQuery$query$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.MonitorQueryProxy.prototype.query = function (req) {
    return this._worker.tars_invoke("query", __tars_MonitorQuery$query$EN(req), arguments[arguments.length - 1]).then(__tars_MonitorQuery$query$DE, __tars_MonitorQuery$query$ER);
};



